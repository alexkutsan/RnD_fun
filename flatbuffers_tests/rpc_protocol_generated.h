// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RPCPROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_RPCPROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace Protocol {

struct RPC;

struct AddNodeRequest;

struct AddNodeResponse;

struct RemoveNodeRequest;

struct RemoveNodeResponse;

struct IsUpdatedRequest;

struct IsUpdatedResponse;

struct OutOfDateNotification;

struct Node;

enum FunctionData {
  FunctionData_NONE = 0,
  FunctionData_AddNodeRequest = 1,
  FunctionData_AddNodeResponse = 2,
  FunctionData_RemoveNodeRequest = 3,
  FunctionData_RemoveNodeResponse = 4,
  FunctionData_IsUpdatedRequest = 5,
  FunctionData_IsUpdatedResponse = 6,
  FunctionData_OutOfDateNotification = 7,
  FunctionData_MIN = FunctionData_NONE,
  FunctionData_MAX = FunctionData_OutOfDateNotification
};

inline const char **EnumNamesFunctionData() {
  static const char *names[] = {
    "NONE",
    "AddNodeRequest",
    "AddNodeResponse",
    "RemoveNodeRequest",
    "RemoveNodeResponse",
    "IsUpdatedRequest",
    "IsUpdatedResponse",
    "OutOfDateNotification",
    nullptr
  };
  return names;
}

inline const char *EnumNameFunctionData(FunctionData e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesFunctionData()[index];
}

template<typename T> struct FunctionDataTraits {
  static const FunctionData enum_value = FunctionData_NONE;
};

template<> struct FunctionDataTraits<AddNodeRequest> {
  static const FunctionData enum_value = FunctionData_AddNodeRequest;
};

template<> struct FunctionDataTraits<AddNodeResponse> {
  static const FunctionData enum_value = FunctionData_AddNodeResponse;
};

template<> struct FunctionDataTraits<RemoveNodeRequest> {
  static const FunctionData enum_value = FunctionData_RemoveNodeRequest;
};

template<> struct FunctionDataTraits<RemoveNodeResponse> {
  static const FunctionData enum_value = FunctionData_RemoveNodeResponse;
};

template<> struct FunctionDataTraits<IsUpdatedRequest> {
  static const FunctionData enum_value = FunctionData_IsUpdatedRequest;
};

template<> struct FunctionDataTraits<IsUpdatedResponse> {
  static const FunctionData enum_value = FunctionData_IsUpdatedResponse;
};

template<> struct FunctionDataTraits<OutOfDateNotification> {
  static const FunctionData enum_value = FunctionData_OutOfDateNotification;
};

bool VerifyFunctionData(flatbuffers::Verifier &verifier, const void *obj, FunctionData type);
bool VerifyFunctionDataVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum FunctionId {
  FunctionId_AddNodeId = 0,
  FunctionId_RemoveNodeId = 1,
  FunctionId_OutOfDateId = 2,
  FunctionId_IsUpdatedId = 3,
  FunctionId_MIN = FunctionId_AddNodeId,
  FunctionId_MAX = FunctionId_IsUpdatedId
};

inline const char **EnumNamesFunctionId() {
  static const char *names[] = {
    "AddNodeId",
    "RemoveNodeId",
    "OutOfDateId",
    "IsUpdatedId",
    nullptr
  };
  return names;
}

inline const char *EnumNameFunctionId(FunctionId e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesFunctionId()[index];
}

enum RPCType {
  RPCType_Request = 0,
  RPCType_Response = 1,
  RPCType_Notification = 2,
  RPCType_MIN = RPCType_Request,
  RPCType_MAX = RPCType_Notification
};

inline const char **EnumNamesRPCType() {
  static const char *names[] = {
    "Request",
    "Response",
    "Notification",
    nullptr
  };
  return names;
}

inline const char *EnumNameRPCType(RPCType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesRPCType()[index];
}

enum ResponseCode {
  ResponseCode_Success = 0,
  ResponseCode_Ignore = 1,
  ResponseCode_Error = 2,
  ResponseCode_MIN = ResponseCode_Success,
  ResponseCode_MAX = ResponseCode_Error
};

inline const char **EnumNamesResponseCode() {
  static const char *names[] = {
    "Success",
    "Ignore",
    "Error",
    nullptr
  };
  return names;
}

inline const char *EnumNameResponseCode(ResponseCode e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesResponseCode()[index];
}

enum IsUpdatedStatus {
  IsUpdatedStatus_Updated = 0,
  IsUpdatedStatus_NotUpdated = 1,
  IsUpdatedStatus_MIN = IsUpdatedStatus_Updated,
  IsUpdatedStatus_MAX = IsUpdatedStatus_NotUpdated
};

inline const char **EnumNamesIsUpdatedStatus() {
  static const char *names[] = {
    "Updated",
    "NotUpdated",
    nullptr
  };
  return names;
}

inline const char *EnumNameIsUpdatedStatus(IsUpdatedStatus e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesIsUpdatedStatus()[index];
}

struct RPC FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FUNC_ID = 4,
    VT_CORR_ID = 6,
    VT_RPC_TYPE = 8,
    VT_DATA_TYPE = 10,
    VT_DATA = 12
  };
  FunctionId func_id() const {
    return static_cast<FunctionId>(GetField<int16_t>(VT_FUNC_ID, 0));
  }
  int64_t corr_id() const {
    return GetField<int64_t>(VT_CORR_ID, 0);
  }
  RPCType rpc_type() const {
    return static_cast<RPCType>(GetField<int16_t>(VT_RPC_TYPE, 0));
  }
  FunctionData data_type() const {
    return static_cast<FunctionData>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const AddNodeRequest *data_as_AddNodeRequest() const {
    return data_type() == FunctionData_AddNodeRequest ? static_cast<const AddNodeRequest *>(data()) : nullptr;
  }
  const AddNodeResponse *data_as_AddNodeResponse() const {
    return data_type() == FunctionData_AddNodeResponse ? static_cast<const AddNodeResponse *>(data()) : nullptr;
  }
  const RemoveNodeRequest *data_as_RemoveNodeRequest() const {
    return data_type() == FunctionData_RemoveNodeRequest ? static_cast<const RemoveNodeRequest *>(data()) : nullptr;
  }
  const RemoveNodeResponse *data_as_RemoveNodeResponse() const {
    return data_type() == FunctionData_RemoveNodeResponse ? static_cast<const RemoveNodeResponse *>(data()) : nullptr;
  }
  const IsUpdatedRequest *data_as_IsUpdatedRequest() const {
    return data_type() == FunctionData_IsUpdatedRequest ? static_cast<const IsUpdatedRequest *>(data()) : nullptr;
  }
  const IsUpdatedResponse *data_as_IsUpdatedResponse() const {
    return data_type() == FunctionData_IsUpdatedResponse ? static_cast<const IsUpdatedResponse *>(data()) : nullptr;
  }
  const OutOfDateNotification *data_as_OutOfDateNotification() const {
    return data_type() == FunctionData_OutOfDateNotification ? static_cast<const OutOfDateNotification *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_FUNC_ID) &&
           VerifyField<int64_t>(verifier, VT_CORR_ID) &&
           VerifyField<int16_t>(verifier, VT_RPC_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyFunctionData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const AddNodeRequest *RPC::data_as<AddNodeRequest>() const {
  return data_as_AddNodeRequest();
}

template<> inline const AddNodeResponse *RPC::data_as<AddNodeResponse>() const {
  return data_as_AddNodeResponse();
}

template<> inline const RemoveNodeRequest *RPC::data_as<RemoveNodeRequest>() const {
  return data_as_RemoveNodeRequest();
}

template<> inline const RemoveNodeResponse *RPC::data_as<RemoveNodeResponse>() const {
  return data_as_RemoveNodeResponse();
}

template<> inline const IsUpdatedRequest *RPC::data_as<IsUpdatedRequest>() const {
  return data_as_IsUpdatedRequest();
}

template<> inline const IsUpdatedResponse *RPC::data_as<IsUpdatedResponse>() const {
  return data_as_IsUpdatedResponse();
}

template<> inline const OutOfDateNotification *RPC::data_as<OutOfDateNotification>() const {
  return data_as_OutOfDateNotification();
}

struct RPCBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_func_id(FunctionId func_id) {
    fbb_.AddElement<int16_t>(RPC::VT_FUNC_ID, static_cast<int16_t>(func_id), 0);
  }
  void add_corr_id(int64_t corr_id) {
    fbb_.AddElement<int64_t>(RPC::VT_CORR_ID, corr_id, 0);
  }
  void add_rpc_type(RPCType rpc_type) {
    fbb_.AddElement<int16_t>(RPC::VT_RPC_TYPE, static_cast<int16_t>(rpc_type), 0);
  }
  void add_data_type(FunctionData data_type) {
    fbb_.AddElement<uint8_t>(RPC::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(RPC::VT_DATA, data);
  }
  RPCBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RPCBuilder &operator=(const RPCBuilder &);
  flatbuffers::Offset<RPC> Finish() {
    const auto end = fbb_.EndTable(start_, 5);
    auto o = flatbuffers::Offset<RPC>(end);
    return o;
  }
};

inline flatbuffers::Offset<RPC> CreateRPC(
    flatbuffers::FlatBufferBuilder &_fbb,
    FunctionId func_id = FunctionId_AddNodeId,
    int64_t corr_id = 0,
    RPCType rpc_type = RPCType_Request,
    FunctionData data_type = FunctionData_NONE,
    flatbuffers::Offset<void> data = 0) {
  RPCBuilder builder_(_fbb);
  builder_.add_corr_id(corr_id);
  builder_.add_data(data);
  builder_.add_rpc_type(rpc_type);
  builder_.add_func_id(func_id);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

struct AddNodeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NODE = 4
  };
  const Node *node() const {
    return GetPointer<const Node *>(VT_NODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODE) &&
           verifier.VerifyTable(node()) &&
           verifier.EndTable();
  }
};

struct AddNodeRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_node(flatbuffers::Offset<Node> node) {
    fbb_.AddOffset(AddNodeRequest::VT_NODE, node);
  }
  AddNodeRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddNodeRequestBuilder &operator=(const AddNodeRequestBuilder &);
  flatbuffers::Offset<AddNodeRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<AddNodeRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddNodeRequest> CreateAddNodeRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Node> node = 0) {
  AddNodeRequestBuilder builder_(_fbb);
  builder_.add_node(node);
  return builder_.Finish();
}

struct AddNodeResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4,
    VT_INFO = 6
  };
  ResponseCode code() const {
    return static_cast<ResponseCode>(GetField<int16_t>(VT_CODE, 0));
  }
  const flatbuffers::String *info() const {
    return GetPointer<const flatbuffers::String *>(VT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.Verify(info()) &&
           verifier.EndTable();
  }
};

struct AddNodeResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(ResponseCode code) {
    fbb_.AddElement<int16_t>(AddNodeResponse::VT_CODE, static_cast<int16_t>(code), 0);
  }
  void add_info(flatbuffers::Offset<flatbuffers::String> info) {
    fbb_.AddOffset(AddNodeResponse::VT_INFO, info);
  }
  AddNodeResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddNodeResponseBuilder &operator=(const AddNodeResponseBuilder &);
  flatbuffers::Offset<AddNodeResponse> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<AddNodeResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddNodeResponse> CreateAddNodeResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    ResponseCode code = ResponseCode_Success,
    flatbuffers::Offset<flatbuffers::String> info = 0) {
  AddNodeResponseBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddNodeResponse> CreateAddNodeResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    ResponseCode code = ResponseCode_Success,
    const char *info = nullptr) {
  return Protocol::CreateAddNodeResponse(
      _fbb,
      code,
      info ? _fbb.CreateString(info) : 0);
}

struct RemoveNodeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_IP = 4
  };
  const flatbuffers::String *ip() const {
    return GetPointer<const flatbuffers::String *>(VT_IP);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.Verify(ip()) &&
           verifier.EndTable();
  }
};

struct RemoveNodeRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) {
    fbb_.AddOffset(RemoveNodeRequest::VT_IP, ip);
  }
  RemoveNodeRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveNodeRequestBuilder &operator=(const RemoveNodeRequestBuilder &);
  flatbuffers::Offset<RemoveNodeRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<RemoveNodeRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveNodeRequest> CreateRemoveNodeRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ip = 0) {
  RemoveNodeRequestBuilder builder_(_fbb);
  builder_.add_ip(ip);
  return builder_.Finish();
}

inline flatbuffers::Offset<RemoveNodeRequest> CreateRemoveNodeRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ip = nullptr) {
  return Protocol::CreateRemoveNodeRequest(
      _fbb,
      ip ? _fbb.CreateString(ip) : 0);
}

struct RemoveNodeResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4,
    VT_INFO = 6
  };
  ResponseCode code() const {
    return static_cast<ResponseCode>(GetField<int16_t>(VT_CODE, 0));
  }
  const flatbuffers::String *info() const {
    return GetPointer<const flatbuffers::String *>(VT_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.Verify(info()) &&
           verifier.EndTable();
  }
};

struct RemoveNodeResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(ResponseCode code) {
    fbb_.AddElement<int16_t>(RemoveNodeResponse::VT_CODE, static_cast<int16_t>(code), 0);
  }
  void add_info(flatbuffers::Offset<flatbuffers::String> info) {
    fbb_.AddOffset(RemoveNodeResponse::VT_INFO, info);
  }
  RemoveNodeResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveNodeResponseBuilder &operator=(const RemoveNodeResponseBuilder &);
  flatbuffers::Offset<RemoveNodeResponse> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<RemoveNodeResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveNodeResponse> CreateRemoveNodeResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    ResponseCode code = ResponseCode_Success,
    flatbuffers::Offset<flatbuffers::String> info = 0) {
  RemoveNodeResponseBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<RemoveNodeResponse> CreateRemoveNodeResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    ResponseCode code = ResponseCode_Success,
    const char *info = nullptr) {
  return Protocol::CreateRemoveNodeResponse(
      _fbb,
      code,
      info ? _fbb.CreateString(info) : 0);
}

struct IsUpdatedRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct IsUpdatedRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  IsUpdatedRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IsUpdatedRequestBuilder &operator=(const IsUpdatedRequestBuilder &);
  flatbuffers::Offset<IsUpdatedRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<IsUpdatedRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<IsUpdatedRequest> CreateIsUpdatedRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  IsUpdatedRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct IsUpdatedResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CODE = 4,
    VT_INFO = 6,
    VT_STATUS = 8
  };
  ResponseCode code() const {
    return static_cast<ResponseCode>(GetField<int16_t>(VT_CODE, 0));
  }
  const flatbuffers::String *info() const {
    return GetPointer<const flatbuffers::String *>(VT_INFO);
  }
  IsUpdatedStatus status() const {
    return static_cast<IsUpdatedStatus>(GetField<int16_t>(VT_STATUS, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_INFO) &&
           verifier.Verify(info()) &&
           VerifyField<int16_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
};

struct IsUpdatedResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code(ResponseCode code) {
    fbb_.AddElement<int16_t>(IsUpdatedResponse::VT_CODE, static_cast<int16_t>(code), 0);
  }
  void add_info(flatbuffers::Offset<flatbuffers::String> info) {
    fbb_.AddOffset(IsUpdatedResponse::VT_INFO, info);
  }
  void add_status(IsUpdatedStatus status) {
    fbb_.AddElement<int16_t>(IsUpdatedResponse::VT_STATUS, static_cast<int16_t>(status), 0);
  }
  IsUpdatedResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IsUpdatedResponseBuilder &operator=(const IsUpdatedResponseBuilder &);
  flatbuffers::Offset<IsUpdatedResponse> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<IsUpdatedResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<IsUpdatedResponse> CreateIsUpdatedResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    ResponseCode code = ResponseCode_Success,
    flatbuffers::Offset<flatbuffers::String> info = 0,
    IsUpdatedStatus status = IsUpdatedStatus_Updated) {
  IsUpdatedResponseBuilder builder_(_fbb);
  builder_.add_info(info);
  builder_.add_status(status);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<IsUpdatedResponse> CreateIsUpdatedResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    ResponseCode code = ResponseCode_Success,
    const char *info = nullptr,
    IsUpdatedStatus status = IsUpdatedStatus_Updated) {
  return Protocol::CreateIsUpdatedResponse(
      _fbb,
      code,
      info ? _fbb.CreateString(info) : 0,
      status);
}

struct OutOfDateNotification FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct OutOfDateNotificationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  OutOfDateNotificationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OutOfDateNotificationBuilder &operator=(const OutOfDateNotificationBuilder &);
  flatbuffers::Offset<OutOfDateNotification> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<OutOfDateNotification>(end);
    return o;
  }
};

inline flatbuffers::Offset<OutOfDateNotification> CreateOutOfDateNotification(
    flatbuffers::FlatBufferBuilder &_fbb) {
  OutOfDateNotificationBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Node FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_IP = 6,
    VT_OS_INFO = 8,
    VT_ENV = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *ip() const {
    return GetPointer<const flatbuffers::String *>(VT_IP);
  }
  const flatbuffers::String *os_info() const {
    return GetPointer<const flatbuffers::String *>(VT_OS_INFO);
  }
  const flatbuffers::String *env() const {
    return GetPointer<const flatbuffers::String *>(VT_ENV);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.Verify(ip()) &&
           VerifyOffset(verifier, VT_OS_INFO) &&
           verifier.Verify(os_info()) &&
           VerifyOffset(verifier, VT_ENV) &&
           verifier.Verify(env()) &&
           verifier.EndTable();
  }
};

struct NodeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Node::VT_NAME, name);
  }
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) {
    fbb_.AddOffset(Node::VT_IP, ip);
  }
  void add_os_info(flatbuffers::Offset<flatbuffers::String> os_info) {
    fbb_.AddOffset(Node::VT_OS_INFO, os_info);
  }
  void add_env(flatbuffers::Offset<flatbuffers::String> env) {
    fbb_.AddOffset(Node::VT_ENV, env);
  }
  NodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NodeBuilder &operator=(const NodeBuilder &);
  flatbuffers::Offset<Node> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<Node>(end);
    return o;
  }
};

inline flatbuffers::Offset<Node> CreateNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> ip = 0,
    flatbuffers::Offset<flatbuffers::String> os_info = 0,
    flatbuffers::Offset<flatbuffers::String> env = 0) {
  NodeBuilder builder_(_fbb);
  builder_.add_env(env);
  builder_.add_os_info(os_info);
  builder_.add_ip(ip);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Node> CreateNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *ip = nullptr,
    const char *os_info = nullptr,
    const char *env = nullptr) {
  return Protocol::CreateNode(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      ip ? _fbb.CreateString(ip) : 0,
      os_info ? _fbb.CreateString(os_info) : 0,
      env ? _fbb.CreateString(env) : 0);
}

inline bool VerifyFunctionData(flatbuffers::Verifier &verifier, const void *obj, FunctionData type) {
  switch (type) {
    case FunctionData_NONE: {
      return true;
    }
    case FunctionData_AddNodeRequest: {
      auto ptr = reinterpret_cast<const AddNodeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FunctionData_AddNodeResponse: {
      auto ptr = reinterpret_cast<const AddNodeResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FunctionData_RemoveNodeRequest: {
      auto ptr = reinterpret_cast<const RemoveNodeRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FunctionData_RemoveNodeResponse: {
      auto ptr = reinterpret_cast<const RemoveNodeResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FunctionData_IsUpdatedRequest: {
      auto ptr = reinterpret_cast<const IsUpdatedRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FunctionData_IsUpdatedResponse: {
      auto ptr = reinterpret_cast<const IsUpdatedResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case FunctionData_OutOfDateNotification: {
      auto ptr = reinterpret_cast<const OutOfDateNotification *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyFunctionDataVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyFunctionData(
        verifier,  values->Get(i), types->GetEnum<FunctionData>(i))) {
      return false;
    }
  }
  return true;
}

inline const Protocol::Node *GetNode(const void *buf) {
  return flatbuffers::GetRoot<Protocol::Node>(buf);
}

inline bool VerifyNodeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Protocol::Node>(nullptr);
}

inline void FinishNodeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Protocol::Node> root) {
  fbb.Finish(root);
}

}  // namespace Protocol

#endif  // FLATBUFFERS_GENERATED_RPCPROTOCOL_PROTOCOL_H_
